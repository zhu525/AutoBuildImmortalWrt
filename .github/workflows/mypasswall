# 工作流名称
name: NEW Make Passwall2 run files

# 触发条件：手动触发
on:
  workflow_dispatch:

jobs:
  build:
    # 运行环境：Ubuntu 22.04
    runs-on: ubuntu-22.04

    steps:
      # 步骤1：检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # 步骤2：获取Passwall2项目的最新发布版本号
      - name: Fetch latest release tag from Passwall
        id: fetch_latest_tag
        run: |
          latest_tag=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | jq -r '.tag_name')
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      # 步骤3：克隆makeself工具库（用于创建自解压包）
      - name: Clone makeself repository
        run: git clone https://github.com/megastep/makeself.git

      # 步骤4：下载Passwall2的最新发布文件
      - name: Download latest Passwall files
        run: |
          mkdir -p downloads
          cd downloads
          # 下载x86_64架构的IPK包
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*passwall_packages_ipk_x86_64.zip"' | cut -d '"' -f 4)
          # 下载aarch64架构的IPK包
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*passwall_packages_ipk_aarch64_cortex-a53.zip"' | cut -d '"' -f 4)
          # 下载mips_24kc架构的IPK包
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*passwall_packages_ipk_mips_24kc.zip"' | cut -d '"' -f 4)
          # 下载Luci界面相关的IPK文件（两个文件）
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*luci-24.10.*\.ipk"' | head -1 | cut -d '"' -f 4)
          curl -LO $(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall/releases/latest | grep -oP '"browser_download_url":\s*".*luci-24.10.*\.ipk"' | tail -1 | cut -d '"' -f 4)
      
      # 步骤5：组织x86_64架构的文件结构
      - name: Organize files for x86_64
        run: |
          mkdir -p passwall_x86_64/depends passwall_x86_64/main
          unzip downloads/passwall_packages_ipk_x86_64.zip -d passwall_x86_64/depends
          rm downloads/passwall_packages_ipk_x86_64.zip
          cp downloads/luci-24.10*.ipk passwall_x86_64/main/

      # 步骤6：组织aarch64架构的文件结构
      - name: Organize files for aarch64_cortex-a53
        run: |
          mkdir -p passwall_aarch64/depends passwall_aarch64/main
          unzip downloads/passwall_packages_ipk_aarch64_cortex-a53.zip -d passwall_aarch64/depends
          rm downloads/passwall_packages_ipk_aarch64_cortex-a53.zip
          cp downloads/luci-24.10*.ipk passwall_aarch64/main/

      # 步骤6.5：组织aarch64架构的文件结构
      - name: Organize files for mips_4kec
        run: |
          mkdir -p passwall_mips_4kec/depends passwall_mips_4kec/main
          unzip downloads/passwall_packages_ipk_mips_24kc.zip -d passwall_mips_4kec/depends
          rm downloads/passwall_packages_ipk_mips_24kc.zip
          cp downloads/luci-24.10*.ipk passwall_mips_4kec/main/
      # 步骤7：创建安装脚本
      - name: Create install.sh scripts
        run: |
          cat <<EOF > passwall_x86_64/install.sh
          #!/bin/sh
          opkg update
          if [ $? -ne 0 ]; then
              echo "update failed。"
              exit 1
          fi
          # 安装必要的依赖包
          opkg install iptables-mod-tproxy
          opkg install iptables-mod-socket
          opkg install iptables-mod-iprange
          opkg install iptables-mod-conntrack-extra
          # 安装Passwall2包
          opkg install depends/*.ipk
          opkg install main/*.ipk
          EOF
          chmod +x passwall_x86_64/install.sh
          # 复制相同的安装脚本到aarch64目录
          cp passwall_x86_64/install.sh passwall_aarch64/install.sh
          cp passwall_x86_64/install.sh passwall_mips_4kec/install.sh

      # 步骤8：将文件移动到makeself目录
      - name: Move passwall2 directories to makeself
        run: |
          mv passwall_x86_64 makeself/
          mv passwall_aarch64 makeself/
          mv passwall_mips_4kec makeself/

      # 步骤9：使用makeself创建自解压安装包
      - name: Create self-extracting packages
        run: |
          cd makeself
          # 创建x86_架构的自解压包
          ./makeself.sh passwall_x86_64/ passwall_x86_64_${{ env.LATEST_TAG }}.run "by github action" ./install.sh
          # 创建aarch64架构的自解压包
          ./makeself.sh passwall_aarch64/ passwall_aarch64_a53_${{ env.LATEST_TAG }}.run "by github action" ./install.sh
          # 创建mips_4kec架构的自解压包
          ./makeself.sh passwall_mips_4kec/ passwall_mips_4kec_${{ env.LATEST_TAG }}.run "by github action" ./install.sh


      # 步骤10：检查生成的文件大小
      - name: Check file sizes
        run: |
          ls -lh makeself/passwall2*.run

      # 步骤11：准备发布名称（使用北京时间）
      - name: Preparing release name
        run: |
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV

      # 步骤12：获取原始项目的发布说明并添加额外内容
      - name: Fetch latest release details
        id: fetch_release_details
        run: |
          extra_content="![Github](https://img.shields.io/badge/Passwall2.run-123456?logo=github&logoColor=fff&labelColor=green&style=for-the-badge) [![Github](https://img.shields.io/badge/国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.cn/archives/1) ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/wukongdaily/RunFilesBuilder/${{ env.LATEST_TAG }}/total?style=for-the-badge&labelColor=black&color=%2325c2a0)"
          release_notes=$(curl -s https://api.github.com/repos/xiaorouji/openwrt-passwall2/releases/latest | jq -r '.body')
          if [ -z "$release_notes" ]; then
            release_notes="No release notes available."
          fi
          echo -e "$extra_content\n\n$release_notes" > release_notes.md

      # 步骤13：打印发布说明内容（用于调试）
      - name: Print release notes
        run: |
          cat release_notes.md

      # 步骤14：创建GitHub发布版本
      - name: Generate new tag & release
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LATEST_TAG }}  # 使用获取到的版本号作为标签
          target_commitish: ${{ github.ref_name }}
          prerelease: false
          body_path: release_notes.md  # 使用生成的发布说明

      # 步骤15：上传自解压包作为发布资源
      - name: Upload run files as release assets
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ env.LATEST_TAG }}
          name: "PassWall2-${{ env.LATEST_TAG }}"
          files: makeself/passwall2*.run  # 上传所有.run文件
          token: ${{ secrets.GITHUB_TOKEN }}
